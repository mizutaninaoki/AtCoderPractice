# see: https://leetcode.com/problems/gas-station/description/
# 他者の回答
# ガスの合計がコストの合計よりも少ない場合、すべてのステーションを通過する方法はありません。そのため、ステーションをループしながら合計し、最後に合計を確認できるようにします。
# それ以外の場合は、一意のソリューションが 1 つ存在する必要があるため、最初に見つけたソリューションが正しいソリューションです。タンクがマイナスになった場合、それはあり得ないので再起動します。
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        # gasの総量がcost未満の場合、絶対一周することができないので、-1を返す
        if (sum(gas) - sum(cost) < 0):
            return -1

        gas_tank, start_index = 0, 0

        for i in range(len(gas)):
            gas_tank += gas[i] - cost[i]
            # この時点のガスタンクに入ってるガスがマイナスになったらダメなので、ガスタンクを0にリセットして、start_indexをプラス１して右にずらす。
            # ガスタンクがマイナスになった時、もう一回start_indexからループをやり直さなくても、必ずガスタンクがマイナスにならないスタート地点が「１つだけ」あるため、
            # 現在から先のstart_indexからスタートして、一度もガスタンクがマイナスにならないstart_indexがあれば、それが唯一の(ユニークな)答えとなる。
            if gas_tank < 0:
                start_index = i+1
                gas_tank = 0

        return start_index

# ステーション3（インデックス3）からスタートし、4単位のガソリンを入れる。あなたのタンク＝0＋4＝4
# ステーション4まで移動する。あなたのタンク = 4 - 1 + 5 = 8
# ステーション0に移動し、自分のタンク＝8 - 2 + 1 = 7になる。
# ステーション1まで移動する。あなたのタンク＝7 - 3 + 2 = 6
# ステーション2まで移動する。あなたのタンク＝6 - 4 + 3 = 5
# ステーション3まで移動します。ガソリン代は5で、ステーション3まで戻るのにちょうどいい。
# したがって、3 を開始時のインデックスとして返します。
